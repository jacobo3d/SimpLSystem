require Geometry;

object LinesTurtle : SimpLTurtle {
  private Lines lines;
  private Mat44 lastMat44;
  private String attrNameBranchDepth;
  private String attrNameStackDepth;
  private String attrNameStringRatio;
  private Ref<ScalarAttribute> branchDepthAttr;
  private Ref<ScalarAttribute> stackDepthAttr;
  private Ref<ScalarAttribute> stringRatioAttr;
  private Xfo leaves[];
  private Size indexIt;
  private Size lastIndex;
  private Size indexStack[];
  private Box3 bounds;
  private Boolean normalizeScale;
};

/// \dfgPresetDefault normalizeScale true
/// \dfgPresetDefault attrNameBranchDepth "branchDepth"
/// \dfgPresetDefault attrNameStackDepth "stackDepth"
/// \dfgPresetDefault attrNameStringRatio "stringRatio"
function LinesTurtle(Boolean normalizeScale, String attrNameBranchDepth, 
                     String attrNameStackDepth, String attrNameStringRatio) {
  this.normalizeScale = normalizeScale;
  this.attrNameBranchDepth = attrNameBranchDepth;
  this.attrNameStackDepth = attrNameStackDepth;
  this.attrNameStringRatio = attrNameStringRatio;
}

function LinesTurtle.walk!(io SimpLInterpreter interpreter) {
  SimpLTurtle pturtle = this;
  interpreter.turtleWalker(pturtle);
}

/// \dfgPresetDefault normalizeScale true;
function Lines LinesTurtle.getResult(out Xfo leaves[]) {
  leaves = this.leaves;
  return this.lines;
}
/// \internal
function LinesTurtle.setup!(Ref<SimpLInterpreter> interpreter, Size length) {
  this.lines = Lines();
  this.lines.addPoints(length + 1);

  if (this.attrNameBranchDepth)
    this.branchDepthAttr = this.lines.attributes.getOrCreateScalarAttribute(this.attrNameBranchDepth);
  if (this.attrNameStackDepth)
    this.stackDepthAttr = this.lines.attributes.getOrCreateScalarAttribute(this.attrNameStackDepth);
  if (this.attrNameStringRatio)
    this.stringRatioAttr = this.lines.attributes.getOrCreateScalarAttribute(this.attrNameStringRatio);

  this.indexStack.push(0);
  this.bounds = Box3();
  this.bounds.setEmpty();
  this.indexIt = 0;
}
/// \internal
function Boolean LinesTurtle.step!(Mat44 mat44, Integer branch, Integer branchLevel, Integer leaf, Size index) {
  if (leaf != 0)
    this.leaves.push(Xfo(mat44));
  Vec3 pos =  mat44.multiplyVector3(Vec3());
  this.bounds.merge(pos);
  if (branch == 0 || branch == 1) {
    this.indexIt++;
    this.lines.setPosition(this.indexIt, pos);
    if (this.branchDepthAttr)
      this.branchDepthAttr.values[this.indexIt] = Scalar(branchLevel);
    if (this.stackDepthAttr)
      this.stackDepthAttr.values[this.indexIt] = Scalar(this.indexStack.size());
    if (this.stringRatioAttr)
      this.stringRatioAttr.values[this.indexIt] = Scalar(index) / this.stringRatioAttr.size();
    this.lines.addSegment(this.lastIndex, this.indexIt);
    this.lastIndex = this.indexIt;
  } 

  if (branch == 1) {
    this.indexStack.push(this.indexIt);

  } else if (branch == -1) {
    this.lastIndex = this.indexStack.pop();
  }

  this.lastMat44 = mat44;
  return true;
}
/// \internal
function LinesTurtle.finish!() {
  if (this.normalizeScale) {
    Vec3 positions[] = Vec3Attribute(this.lines.attributes.positionsAttribute).values;
    Vec3 scale(Math_max(this.bounds.min.x, this.bounds.max.x),
               Math_max(this.bounds.min.y, this.bounds.max.y),
               Math_max(this.bounds.min.z, this.bounds.max.z));
    Scalar factor = Math_max( Math_max(scale.x, scale.y), scale.z);
    Scalar divisor = Math_badDivisor(factor) ? 1.0 : 1.0 / factor;
    for (Size i; i<positions.size(); i++)
      positions[i] *= divisor;
    for (Size i; i<this.leaves.size(); i++) {
      this.leaves[i].tr *= divisor;
      this.leaves[i].sc *= divisor; 
    }
  }
}