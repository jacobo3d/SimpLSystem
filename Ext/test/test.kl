require SimpLSystem;


struct Microtimer{
  UInt64 start;
  String prefix;
  Boolean reported;
};

inline Microtimer(String prefix) {
  this.prefix = prefix;
  this.start = getCurrentTicks();
}

inline Microtimer.report!() {
  this.report("");
}

inline Microtimer.report!(String msg) {
  this.reported = true;
  Scalar time  = getSecondsBetweenTicks(this.start, getCurrentTicks());
  Integer microseconds = Integer(time * 1000000);
  report(this.prefix+": "+microseconds+" us. " + msg);
  this.start = getCurrentTicks();
}

inline ~Microtimer() {
  if (!this.reported)
    this.report("~");
}

operator entry() {
  {
    Microtimer timer("[Agae test]");
    Size evolutions = 7;

    SimpLRule rules[];
    rules.push( SimpLRule("A", "AB"));
    rules.push( SimpLRule("B", "A"));
    SimpLSystem lsys("A", rules);
    String evolved = lsys.evolve(evolutions);

    if (evolved != "ABAABABAABAABABAABABAABAABABAABAAB")
      report("Wrong evolution.");
  }

  {
    Microtimer timer("[1001010 test]");
    Size evolutions = 3;

    SimpLRule rules[];
    rules.push( SimpLRule("1", "11"));
    rules.push( SimpLRule("0", "1[0]0"));
    SimpLSystem lsys("0", rules);
    String evolved = lsys.evolve(evolutions);

    if (evolved != "1111[11[1[0]0]1[0]0]11[1[0]0]1[0]0")
      report("Wrong evolution." + evolved);
  }

  {
    Microtimer timer("[F+F- test");
    Size evolutions = 2;

    SimpLRule rules[];
    rules.push( SimpLRule("F", "F+F-F-F+F"));
    SimpLSystem lsys("F", rules);
    String evolved = lsys.evolve(evolutions);

    if (evolved != "F+F-F-F+F+F+F-F-F+F-F+F-F-F+F-F+F-F-F+F+F+F-F-F+F")
      report("Wrong evolution." + evolved);
  }
  {
    Size evolutions = 8;

    SimpLRule rules[];
    rules.push( SimpLRule("F", "F+F-F-F+F"));
    SimpLSystem lsys("F", rules);
    for (Size i  = 0; i< 35; i++) {
      Microtimer timer("[F+F- test");
      String evolved = lsys.evolve(evolutions);
    }
  }
}
