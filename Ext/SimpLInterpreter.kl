
/// \internal
struct SimpLxform{
  Mat44 transform;
  Integer branch;
  Integer leaf;
};
/// \internal
function SimpLxform() {
  this.transform.setIdentity();
}

object SimpLInterpreter{
  Mat44 transform;
  SimpLxform rules[String];
  Mat44 stack[];
  SimpLSystem lSystem;
  Boolean warnings;
};

function SimpLInterpreter(SimpLSystem lSystem, Xfo startingTransform) {
  this.lSystem = lSystem;
  this.transform = startingTransform.toMat44();
}
/// \dfgPresetDefault warnings true
function SimpLInterpreter.reportWarnings!(Boolean warnings) {
  this.warnings = warnings;
}

function SimpLInterpreter.addSymbol!(String symbol, Xfo transform, Integer leaf) {
  SimpLxform xformRule();
  xformRule.branch = 0;
  xformRule.transform = transform.toMat44();
  xformRule.leaf = leaf;
  this.rules[symbol] = xformRule;
}

/// \dfgPresetDefault pushSymbol "["
/// \dfgPresetDefault popSymbol "["
function SimpLInterpreter.addBranchSymbol!(String pushSymbol, String popSymbol, Xfo pushTransform, Xfo popTransform) {
  SimpLxform branchRule();
  branchRule.branch = 1;
  branchRule.transform = pushTransform.toMat44();
  this.rules[pushSymbol] = branchRule;
  SimpLxform unbranchRule();
  unbranchRule.branch = -1;
  unbranchRule.transform = popTransform.toMat44();
  this.rules[popSymbol] = unbranchRule;
}

/// \internal
function SimpLxform[String] SimpLInterpreter.getCleanRules!() {
  Boolean usedChars[String] = this.lSystem.getAllUsedSymbols();
  SimpLxform newRules[String];  
  String definedButNotUsed[], usedButNotDefined[];
  
  for (key, value in this.rules) {
    if (usedChars.has(key))
      newRules[key] = value;
    else
      definedButNotUsed.push(key);
  }
  for (key, value in usedChars) {
    if (!newRules.has(key)) {
      usedButNotDefined.push(key);
      newRules[key] = SimpLxform();
    }
  }
  if (this.warnings) {
    if (usedButNotDefined)
      report('[SimpLInterpreter] Symbols "'+",".join(usedButNotDefined)+'" used but not defined. (Empty interpretations added).');
    if (definedButNotUsed)
      report('[SimpLInterpreter] Symbols "'+",".join(definedButNotUsed)+'" have interpretations defined but are not used in the L-System.');
  }
  return(newRules);
}

function Vec3[] SimpLInterpreter.walkTheTurtle!(io Xfo leaves[]) {
  SimpLxform rules[String] = this.getCleanRules();
  leaves.resize(0);
  String lstring = this.lSystem.getString();
  Vec3 points[]; points.resize(lstring.length());
  for (Size i=0; i<lstring.length(); i++) {
    SimpLxform rule = rules[lstring[i]];
    if (rule.branch == 1)
      this.stack.push(this.transform);
    else if (rule.branch == -1)
      this.transform = this.stack.pop();
    this.transform =  this.transform * rule.transform;
    points[i] = this.transform.multiplyVector3(Vec3());
    if (rule.leaf != 0)
      leaves.push(Xfo(this.transform));
  }
  return points;
}


