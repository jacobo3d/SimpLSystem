require Util;


struct SimpLRule {
  String input;
  String output;
};

function SimpLRule(String input, String output) {
  this.input = input;
  this.output = output;
}

object SimpLSystem {
  private String evolved;
  private Size safety;
  SimpLRule rules[];
  String start;
  private Size iterations;
};

/// \dfgPresetOmit
inline SimpLSystem(String start, SimpLRule rules[]) {
  this = SimpLSystem(start, rules, 5000000);
}

/// \dfgPresetDefault safety 5000000
inline SimpLSystem(String start, SimpLRule rules[], Size safety) {
  this.start = start;
  this.evolved = start;
  this.rules = rules;
  this.resetEvolution();
  this.safety = 5000000;
}

/// \dfgPresetDefault iterations 3
function String SimpLSystem.evolve!(Size iterations) {
  this.evolved = this.start;
  for (Size i=0; i<iterations; i++) {
    this.evolveOnce(1.0f);
    if (this.evolved.length() > this.safety)
      break;
  }
  return this.evolved;
}

/// \dfgPresetDefault iterations 3.5
function String SimpLSystem.partialEvolve!(Scalar iterations) {
  this.evolved = this.start;
  Size evolutions = Math_max(0.0, floor(iterations));
  for (Size i=0; i<evolutions+1; i++) {
    if (i == evolutions)
      this.evolveOnce(iterations - evolutions);
    else
      this.evolveOnce(1.0f);
    if (this.evolved.length() > this.safety)
      break;
  }
  return this.evolved;
}

/// \internal
inline SimpLSystem.resetEvolution!() {
  this.evolved = this.start;
  this.iterations = 0;
}

/// \internal
inline SimpLSystem.evolveOnce!(Scalar completeness) {
  String newState;
  Size safety = this.safety;
  Size charNum = this.evolved.length() * completeness;
  for (Size i=0; i<this.evolved.length(); i++) {
    String char = this.evolved[i];
    String mutation = char;
    if (i <= charNum) {      
      for (Size j=0; j<this.rules.size(); j++) {
        if (char == this.rules[j].input) { 
          mutation = this.rules[j].output;
          break;
        }
      }
    }
    newState += mutation;
    if (newState.length() > safety)
      break;
  }
  if (newState.length() > safety)
    report("[SimpLSystem] Safety tripped. (<" + this.safety + " characters in evolved string.");
  this.iterations++;
  this.evolved = newState;
}


/// \internal
function SimpLSystem.addAllLettersToDict(String string, io Boolean usedChars[String]) {
  for (Size i; i<string.length(); i++)
    usedChars[string[i]] = true;
}
/// \internal
function Boolean[String] SimpLSystem.getAllUsedSymbols() {
  Boolean usedChars[String];
  this.addAllLettersToDict(this.start, usedChars);
  for (Size i; i<this.rules.size(); i++) {
    this.addAllLettersToDict(this.rules[i].input, usedChars);
    this.addAllLettersToDict(this.rules[i].output, usedChars);
  }
  return usedChars;
}

function String SimpLSystem.getString() {
  return this.evolved;
}

