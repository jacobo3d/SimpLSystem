require SimpLSystem;
require PsyopUtil;

operator entry() {
  SimpleTimer timer("SimpLSystem");
  {
    Size evolutions = 7;

    SimpLRule rules[];
    rules.push( SimpLRule("A", "AB"));
    rules.push( SimpLRule("B", "A"));
    SimpLSystem lsys("A", rules);
    String evolved = lsys.evolve(evolutions);

    report(evolved.length());
    if (evolved != "ABAABABAABAABABAABABAABAABABAABAAB")
      report("Wrong evolution.");
    timer.reportUS(evolutions + " evolutions");
  }

  {
    Size evolutions = 3;

    SimpLRule rules[];
    rules.push( SimpLRule("1", "11"));
    rules.push( SimpLRule("0", "1[0]0"));
    SimpLSystem lsys("0", rules);
    String evolved = lsys.evolve(evolutions);

    report(evolved.length());
    if (evolved != "1111[11[1[0]0]1[0]0]11[1[0]0]1[0]0")
      report("Wrong evolution." + evolved);
    timer.reportUS(evolutions + " evolutions");
  }

  {
    Size evolutions = 2;

    SimpLRule rules[];
    rules.push( SimpLRule("F", "F+F-F-F+F"));
    SimpLSystem lsys("F", rules);
    String evolved = lsys.evolve(evolutions);

    report(evolved.length());
    if (evolved != "F+F-F-F+F+F+F-F-F+F-F+F-F-F+F-F+F-F-F+F+F+F-F-F+F")
      report("Wrong evolution." + evolved);
    timer.reportUS(evolutions + " evolutions");
  }
  {
    Size evolutions = 8;

    SimpLRule rules[];
    rules.push( SimpLRule("F", "F+F-F-F+F"));
    SimpLSystem lsys("F", rules);
    for (Size i  = 0; i< 35; i++) {
      String evolved = lsys.evolve(evolutions);
      timer.trial(true, "Evolved. " + evolved.length());
    }
    timer.endTrials("Done.");  
  }
}
